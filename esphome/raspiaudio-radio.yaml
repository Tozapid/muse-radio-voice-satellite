substitutions:
  name: raspiaudio-radio
  friendly_name: Raspiaudio Radio
  ha_entity: media_player.raspiaudio_radio_raspiaudio_radio

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.9.1
  platformio_options:
    board_build.flash_mode: dio
    board_build.arduino.memory_type: qio_opi
  on_boot:
    priority: -100.0
    then:
      - output.turn_off: dac_mute
      - light.turn_on:
          id: screen_backlight
          brightness: 100%
      - lambda: |-
          id(lightTO) = 0;
      - script.execute: logo
      - script.wait: logo
      - delay: 5sec
      - script.execute: reset_display
      - script.wait: reset_display

external_components:
  - source: github://RASPIAUDIO/esphomeRadio@main
    components: [es8388]
    refresh: 0s

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 8MB
  framework:
    type: arduino

ota:
  platform: esphome

api:
  services:
    - service: start_va
      then:
        - voice_assistant.start
    - service: stop_va
      then:
        - voice_assistant.stop

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${name}
    password: "12345678"

improv_serial:

#captive_portal:

logger:

##########
# Hardware Configuration
es8388:

psram:
  mode: octal
  speed: 80MHz

#######
# Buses Configuration

i2c:
  sda: GPIO18
  scl: GPIO11
  id: i2c_bus

spi:
  - id: spi_bus0
    clk_pin: GPIO12
    mosi_pin: GPIO8
    # miso_pin: GPIOXX
    interface: hardware

i2s_audio:
  - id: i2s_shared
    i2s_lrclk_pin: GPIO16
    i2s_bclk_pin: GPIO5
    i2s_mclk_pin: GPIO0

#####################
# Internal Components

output:
  - platform: gpio
    id: dac_mute
    pin:
      number: GPIO46
      inverted: true
      mode:
        output: true
      allow_other_uses: true

  - platform: ledc
    pin:
      number: GPIO41
      mode:
        output: true
    id: screen_backlight_pin

light:
  - platform: monochromatic
    output: screen_backlight_pin
    id: screen_backlight
    name: Screen Backlight
    restore_mode: ALWAYS_ON

globals:
  - id: lightTO
    type: int
    initial_value: '0'

interval:
  - interval: 1sec
    then:
      - if:
          condition:
            and:
              - lambda: 'return id(lightTO) < 60;'
          then:
            - lambda: |-
                id(lightTO)++;
          else:
            - lambda: |-
                id(lightTO) <= 6;
            - light.turn_off:
                id: screen_backlight
                transition_length: 2s

microphone:
  - platform: i2s_audio
    id: raspiaudio_microphone
    i2s_din_pin: GPIO4
    adc_type: external
    pdm: false

image:
  - file: "https://github.com/RASPIAUDIO/esphomeRadio/raw/main/images/Raspiaudio.png"
    id: raspiIm
    resize: 320x240
    type: RGB24

font:
  - file:
      type: gfonts
      family: Roboto
      weight: 300
      italic: true
    id: font_status
    size: 30
    glyphsets:
      - GF_Latin_Core
      - GF_Cyrillic_Core
  - file:
      type: gfonts
      family: Roboto
      weight: 300
    id: font_body
    size: 15
    glyphsets:
      - GF_Latin_Core
      - GF_Cyrillic_Core

display:
  - id: myDisplay
    platform: ili9xxx
    model: ST7789V
    cs_pin: GPIO40
    dc_pin: GPIO39
    reset_pin: GPIO9
    invert_colors: true
    rotation: 90
    update_interval: never
    auto_clear_enabled: false
    pages:
        - id: logoP
          lambda: |-
            // Logo
            it.image(0, 0, id(raspiIm));
        - id: waitingP
          lambda: |-
            it.fill(Color::BLACK);
            // Current Status
            const char* text = "Wake Word...";
            it.printf(40, 112, id(font_status), Color::WHITE, "%s", text);
            // Time
            auto time = id(homeassistant_time).now();
            if (time.is_valid()) {
              char str[6];
              sprintf(str, "%02d:%02d", time.hour, time.minute);
              it.printf(25, 5, id(font_body), Color::WHITE, "%s", str);
            }
            // Battery icon
            it.rectangle(260, 5, 30, 15, Color(255, 255, 255)); // White frame
            it.rectangle(291, 8, 3, 9, Color(255, 255, 255)); // White contact
            // Battery level
            int battery_level = (id(battery_percentage).state / 100.0) * 28;
            it.filled_rectangle(262, 7, battery_level, 11, Color(0, 255, 0)); // Green fill
            it.printf(260, 25, id(font_body), Color(255, 255, 255), "%.0f%%", id(battery_percentage).state); // Battery precentage
        - id: waitingBP
          lambda: |-
            it.fill(Color::BLACK);
            // Current Status
            const char* text = "Action Button...";
            it.printf(40, 112, id(font_status), Color::WHITE, "%s", text);
            // Time
            auto time = id(homeassistant_time).now();
            if (time.is_valid()) {
              char str[6];
              sprintf(str, "%02d:%02d", time.hour, time.minute);
              it.printf(25, 5, id(font_body), Color::WHITE, "%s", str);
            }
            // Battery icon
            it.rectangle(260, 5, 30, 15, Color(255, 255, 255)); // White frame
            it.rectangle(291, 8, 3, 9, Color(255, 255, 255)); // White contact
            // Battery level
            int battery_level = (id(battery_percentage).state / 100.0) * 28;
            it.filled_rectangle(262, 7, battery_level, 11, Color(0, 255, 0)); // Green fill
            it.printf(260, 25, id(font_body), Color(255, 255, 255), "%.0f%%", id(battery_percentage).state); // Battery precentage
        - id: listeningP
          lambda: |-
            it.fill(Color::BLACK);
            // Current Status
            const char* text = "Listening...";
            it.printf(40, 190, id(font_status), Color::WHITE, "%s", text);
            // Microphone icon
            it.rectangle(140, 60, 40, 80, Color::WHITE);
            for (int i = 65; i < 135; i += 10) {
              it.line(145, i, 175, i, Color::WHITE);
            }
            it.filled_circle(160, 140, 10, Color::WHITE);
            it.line(160, 150, 160, 180, Color::WHITE);
            it.line(150, 180, 170, 180, Color::WHITE);
            // Time
            auto time = id(homeassistant_time).now();
            if (time.is_valid()) {
              char str[6];
              sprintf(str, "%02d:%02d", time.hour, time.minute);
              it.printf(25, 5, id(font_body), Color::WHITE, "%s", str);
            }
            // Battery icon
            it.rectangle(260, 5, 30, 15, Color(255, 255, 255)); // White frame
            it.rectangle(291, 8, 3, 9, Color(255, 255, 255)); // White contact
            // Battery level
            int battery_level = (id(battery_percentage).state / 100.0) * 28;
            it.filled_rectangle(262, 7, battery_level, 11, Color(0, 255, 0)); // Green fill
            it.printf(260, 25, id(font_body), Color(255, 255, 255), "%.0f%%", id(battery_percentage).state); // Battery precentage
        - id: answeringP
          lambda: |-
            it.fill(Color::BLACK);
            // Current Status
            const char* text = "Answering...";
            it.printf(40, 112, id(font_status), Color::WHITE, "%s", text);
            // Answer
            it.printf(25, 45, id(font_body),  Color::WHITE, "%s", id(text_request).state.c_str());
            it.printf(25, 195, id(font_body), Color::WHITE, "%s", id(text_response).state.c_str());
            // Time
            auto time = id(homeassistant_time).now();
            if (time.is_valid()) {
              char str[6];
              sprintf(str, "%02d:%02d", time.hour, time.minute);
              it.printf(25, 25, id(font_body), Color::WHITE, "%s", str);
            }
            // Battery icon
            it.rectangle(260, 5, 30, 15, Color(255, 255, 255)); // White frame
            it.rectangle(291, 8, 3, 9, Color(255, 255, 255)); // White contact
            // Battery level
            int battery_level = (id(battery_percentage).state / 100.0) * 28;
            it.filled_rectangle(262, 7, battery_level, 11, Color(0, 255, 0)); // Green fill
            it.printf(260, 25, id(font_body), Color(255, 255, 255), "%.0f%%", id(battery_percentage).state); // Battery precentage
###############
# Home Assistant Components

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO48
      inverted: true
      mode:
        input: true
        pullup: true
    id: click_vol
    name: Volume Button
    disabled_by_default: true
    on_click:
      then:
        - voice_assistant.start

  - platform: gpio
    pin:
      number: GPIO45
      inverted: true
      mode:
        input: true
        pullup: true
    id: click_sta
    name: Volume Button
    disabled_by_default: true
    on_click:
      then:
        - switch.toggle: use_wake_word
        - media_player.stop:

  - platform: gpio
    pin:
      number: GPIO10
      inverted: true
      mode:
        input: true
        pullup: true
    id: jack_plugged
    name: Jack Plugged In
    disabled_by_default: true
    filters:
      - delayed_on_off: 0.3s
    on_state:
      then:
        - script.execute: update_dac_mute

  - platform: gpio
    pin:
      number: GPIO21
      mode:
        input: true
        pullup: true
    id: usb_plugged
    name: USB Plugged In
    disabled_by_default: true

  - platform: template
    name: "Button 4"
    lambda: |-
      return (id(adc_buttons).state > 0.7 && id(adc_buttons).state < 0.9);
    on_press:
      then:
        - switch.turn_on: listen_force
        - media_player.stop:
    on_release:
      then:
        - switch.turn_off: listen_force
        - media_player.play:

  - platform: template
    name: "Button 3"
    lambda: |-
      return (id(adc_buttons).state > 0.4 && id(adc_buttons).state < 0.6);

  - platform: template
    name: "Button 2"
    lambda: |-
      return (id(adc_buttons).state > 1.9 && id(adc_buttons).state < 2.2);

  - platform: template
    name: "Button 1"
    lambda: |-
      return (id(adc_buttons).state > 1.4 && id(adc_buttons).state < 1.7);

sensor:
  - platform: rotary_encoder
    name: "Volume"
    id: volume_encoder
    pin_a:
      number: GPIO42
      mode:
        input: true
        pullup: true
    pin_b:
      number: GPIO3
      mode:
        input: true
        pullup: true
    on_anticlockwise:
      then:
        - script.execute: reset_display
        - homeassistant.service:
            service: media_player.volume_set
            data_template:
              entity_id: ${ha_entity}
              volume_level: "{{ state_attr('${ha_entity}', 'volume_level') - 0.01 }}"
    on_clockwise:
      then:
        - script.execute: reset_display 
        - homeassistant.service:
            service: media_player.volume_set
            data_template:
              entity_id: ${ha_entity}
              volume_level: "{{ state_attr('${ha_entity}', 'volume_level') + 0.01 }}"

  - platform: rotary_encoder
    name: "Function"
    id: function_encoder
    pin_a:
      number: GPIO7
      mode:
        input: true
        pullup: true
    pin_b:
      number: GPIO6
      mode:
        input: true
        pullup: true
    on_anticlockwise:
      then:
        - script.execute: reset_display
    on_clockwise:
      then:
        - script.execute: reset_display

  - platform: template
    name: "Battery Voltage"
    id: battery_voltage
    unit_of_measurement: "V"
    device_class: voltage
    update_interval: 60s
    lambda: |-
      // Directly read the ADC value on GPIO13
      return (float) analogRead(GPIO_NUM_13) / 4095.0 * 3.3; // Adjust based on expected voltage range
    filters:
      - multiply: 2.0
    on_value_range:
      below: 3.00
      then:
        - switch.turn_on:
            id: shutdown1
  - platform: template
    name: "Battery Percentage"
    id: battery_percentage
    device_class: battery
    unit_of_measurement: "%"
    accuracy_decimals: 0
    lambda: |-
      if (id(battery_voltage).state <= 3.0) {
        return 0.0;
      } else if (id(battery_voltage).state >= 4.1) {
        return 100.0;
      } else {
        return (id(battery_voltage).state - 3.0) / (4.1 - 3.0) * 100.0;
      }

  - platform: adc
    pin: GPIO1
    name: "Buttons"
    id: adc_buttons
    internal: true
    update_interval: 50ms
    attenuation: 11db

text_sensor:
  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>50) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),39);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>50) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }

switch:
  - platform: template
    name: Use Wake Word
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - lambda: id(va).set_use_wake_word(true);
      - if:
          condition:
            not:
              voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
      - script.execute: reset_display
    on_turn_off:
      - voice_assistant.stop
      - lambda: id(va).set_use_wake_word(false);
      - script.execute: reset_display

  - platform: shutdown
    name: "Shutdown"
    internal: true
    id: shutdown1

  - platform: template
    id: listen_force
    name: Listen_force
    optimistic: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - switch.turn_off: use_wake_word
      - delay: 0.5s
      - voice_assistant.start_continuous
    on_turn_off:
      - switch.turn_on: use_wake_word

media_player:
  - platform: i2s_audio
    id: raspiaudio_speaker
    name: None
    dac_type: external
    i2s_dout_pin: GPIO17
    i2s_audio_id: i2s_shared
    mode: mono
    mute_pin:
      number: GPIO46
      inverted: true
      mode:
        output: true
      allow_other_uses: true

voice_assistant:
  id: va
  microphone: raspiaudio_microphone
  media_player: raspiaudio_speaker
  use_wake_word: true
  on_listening:
    - logger.log: "🔵Voice Assistant is now listening"
    - light.turn_on:
        id: screen_backlight
        brightness: 100%
    - script.execute: listening
    - script.wait: listening

  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda return x;

  on_tts_start:
    - logger.log: "🔵Voice Assistant is now streaming answer"
    - text_sensor.template.publish:
        id: text_response
        state: !lambda return x;
    - light.turn_on:
        id: screen_backlight
        brightness: 100%
    - script.execute: answering
    - script.wait: answering
    - delay: 5sec
    - logger.log: "🔵Waiting for media playback to finish"
    - delay: 5sec
    - wait_until:
          media_player.is_idle: raspiaudio_speaker
    - logger.log: "🔵TTS playback finished, switching to waiting page"
    - delay: 1sec
    - script.execute: reset_display
    - script.wait: reset_display

  on_client_disconnected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.stop

  on_error:
    - light.turn_on:
        id: screen_backlight
        brightness: 100%
    - delay: 1s
    - script.execute: reset_display
    - script.wait: reset_display
    - lambda: |-
        if (code == "wake-provider-missing" || code == "wake-engine-missing") {
          id(use_wake_word).turn_off();
        }


#########
# Scripts

script:
  - id: reset_display
    then:
    - light.turn_on: screen_backlight
    - lambda: |-
        id(lightTO) = 0;
    - script.execute: waiting
    - script.wait: waiting

  - id: update_dac_mute
    then:
      - if:
          condition:
            and:
              - media_player.is_playing
              - binary_sensor.is_off: jack_plugged
          then:
            - logger.log: "Turning off DAC mute"
            - output.turn_off: dac_mute
          else:
            - logger.log: "Turning on DAC mute"
            - output.turn_on: dac_mute

  - id: logo
    then:
      - lambda: |-
          id(myDisplay).show_page(logoP);
          id(myDisplay).update();
          id(lightTO) = 0;
      - light.turn_on: screen_backlight

  - id: waiting
    then:
      - if:
          condition:
              switch.is_on: use_wake_word
          then:
              - voice_assistant.start_continuous
              - lambda: |-
                  id(myDisplay).show_page(waitingP);
                  id(myDisplay).update();
                  id(lightTO) = 0;
              - light.turn_on: screen_backlight
          else:
              - lambda: |-
                  id(myDisplay).show_page(waitingBP);
                  id(myDisplay).update();
                  id(lightTO) = 0;
              - light.turn_on: screen_backlight
  - id: listening
    then:
      - lambda: |-
          id(myDisplay).show_page(listeningP);
          id(myDisplay).update();
          id(lightTO) = 0;

      - light.turn_on: screen_backlight
  - id: answering
    then:
      - lambda: |-
          id(myDisplay).show_page(answeringP);
          id(myDisplay).update();
          id(lightTO) = 0;
      - light.turn_on: screen_backlight
