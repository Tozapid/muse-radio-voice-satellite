substitutions:
  name: raspiaudio-radio
  friendly_name: Raspiaudio Radio

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.9.1
  platformio_options:
    board_build.flash_mode: dio
    board_build.arduino.memory_type: qio_opi
  on_boot:
    priority: -100.0
    then:
      - output.turn_off: dac_mute
      - light.turn_on:
          id: screen_backlight
          brightness: 100%
      - lambda: |-
              id(lightTO) = 0;
              id(phase) = 0;
      - script.execute: reset_display

            
external_components:
  - source: github://RASPIAUDIO/esphomeRadio@main
    components: [es8388]
    refresh: 0s

        
esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 8MB
  framework:
    type: esp-idf

micro_wake_word:
  id: mww
  models:
    - model: okay_nabu
#      id: okat_nabu
    - model: hey_jarvis
#      id: hey_jarvis
    - model: hey_mycroft
#      id: hey_mycroft
    - model: alexa
#      id: alexa
  
  vad:
  microphone: raspiaudio_microphone
  on_wake_word_detected:        
    - voice_assistant.start:
        wake_word: !lambda return wake_word;              
ota:
  platform: esphome
  
api:

wifi:
  ap:
     ssid: "Raspiaudio-radio"
     password: "12345678"

captive_portal:
                
#improv_serial: 

logger:
   level: DEBUG

##########
# Hardware Configuration
es8388:
 

psram:
  mode: octal
  speed: 80MHz

#######
# Buses Configuration

i2c:
  sda: GPIO18
  scl: GPIO11
  id: i2c_bus

spi:
  - id: spi_bus0
    clk_pin: GPIO12
    mosi_pin: GPIO8
    # miso_pin: GPIOXX
    interface: hardware

i2s_audio:
  - id: i2s_shared
    i2s_lrclk_pin: GPIO16
    i2s_bclk_pin: GPIO5
    i2s_mclk_pin: GPIO0

#####################
# Internal Components

output:
  - platform: gpio
    id: dac_mute
    pin:
      number: GPIO46
      inverted: true
      mode:
        output: true


  - platform: ledc
    pin:
      number: GPIO41
      mode:
        output: true
    id: screen_backlight_pin

light:
  - platform: monochromatic
    output: screen_backlight_pin
    id: screen_backlight
    name: Screen Backlight
    restore_mode: ALWAYS_ON
    
       
globals:
  - id: lightTO
    type: int
    initial_value: '0'
  - id: Vol
    type: float
    initial_value: '0.7'    
  - id: phase
    type: int
    initial_value: '0'
        

interval:
  - interval: 1sec
    then:
      - if:
          condition:  
            and:
              - light.is_on: screen_backlight
              - lambda: 'return id(lightTO) < 60;'              
          then:
            - lambda: |-
                id(lightTO)++;
          else:
            - lambda: |-
                id(lightTO) = 0;
            - light.turn_off: screen_backlight               
             
microphone:
  - platform: i2s_audio
    id: raspiaudio_microphone
    i2s_din_pin: GPIO4
    adc_type: external
    pdm: false
    
image:
  - file: "https://github.com/RASPIAUDIO/esphomeRadio/raw/main/images/Raspiaudio.png"
    id: raspiIm
    resize: 320x240
    type: RGB24
  - file:  "https://github.com/RASPIAUDIO/esphomeRadio/raw/main/images/WFWW.png" 
    id: WFWWIm
    resize: 320x240
    type: RGB24
  - file:  "https://github.com/RASPIAUDIO/esphomeRadio/raw/main/images/W.png" 
    id: WIm
    resize: 320x240
    type: RGB24
  - file:  "https://github.com/RASPIAUDIO/esphomeRadio/raw/main/images/LISTEN.png" 
    id: LIm
    resize: 320x240
    type: RGB24
  - file:  "https://github.com/RASPIAUDIO/esphomeRadio/raw/main/images/ANSWER.png" 
    id: AIm
    resize: 320x240
    type: RGB24    

     
font:
  - file:
      type: gfonts
      family: Figtree
      weight: 300
      italic: true
    id: font_request
    size: 15 
  - file:
      type: gfonts
      family: Figtree
      weight: 300
    id: font_response
    size: 15 
            
display:
  - id: myDisplay
    platform: ili9xxx
    model: ST7789V
    cs_pin: GPIO40
    dc_pin: GPIO39
    reset_pin: GPIO9
    invert_colors: true
    rotation: 90   
    update_interval: never
    auto_clear_enabled: false
    pages:
        - id: logoP
          lambda: |-
            it.image(0, 0, id(raspiIm));        
        - id: waitingP
          lambda: |-
            it.image(0, 0, id(WFWWIm));        
        - id: waitingBP
          lambda: |-
            it.image(0, 0, id(WIm));        
        - id: listeningP
          lambda: |-
              it.image(0, 0, id(LIm));            
        - id: answeringP
          lambda: |-
              it.image(0, 0, id(AIm));    
              it.rectangle(20 , 20 , 280 , 30 , Color::BLACK );
              it.printf(30, 25, id(font_request), Color::BLACK, "%s", id(text_request).state.c_str());
              it.rectangle(20 , 190 , 280 , 30 , Color::BLACK );
              it.printf(30, 195, id(font_response), Color::BLACK, "%s", id(text_response).state.c_str());

# Home Assistant Components            
sensor:
  - platform: rotary_encoder
    name: "Volume"
    id: volume_encoder
    pin_a:
      number: GPIO42
      mode:
        input: true
        pullup: true
    pin_b:
      number: GPIO3
      mode:
        input: true
        pullup: true
    on_anticlockwise:
      then:
        - light.turn_on: screen_backlight      
        - lambda: |-
                id(lightTO) = 0;       
                id(Vol) -= 0.1;
                if(id(Vol) < 0) id(Vol) = 0;                  
        - speaker.volume_set: !lambda "return id(Vol);"
    on_clockwise:
      then:

        - light.turn_on: screen_backlight
        - lambda: |-
                id(lightTO) = 0;        
                id(Vol) += 0.1;
                if(id(Vol) > 1) id(Vol) = 1;     
        - speaker.volume_set: !lambda "return id(Vol);"                
                
  - platform: rotary_encoder
    name: "Function"
    id: function_encoder
    pin_a:
      number: GPIO7
      mode:
        input: true
        pullup: true
    pin_b:
      number: GPIO6
      mode:
        input: true
        pullup: true
    on_anticlockwise:
      then:
        - light.turn_on: screen_backlight      
        - lambda: |-
                id(lightTO) = 0;       
    on_clockwise:
      then:
        - light.turn_on: screen_backlight
        - lambda: |-
                id(lightTO) = 0;    
               
text_sensor:
  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>40) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),39);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>32) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }

   
    
speaker:
   - platform: i2s_audio
     id: raspiaudio_speaker
     dac_type: external
     i2s_dout_pin: GPIO17
     i2s_audio_id: i2s_shared
     sample_rate: 48000
     channel: mono
          
voice_assistant:
  id: va
  microphone: raspiaudio_microphone
  speaker:
  use_wake_word: false     
  on_listening:
    - logger.log: "listening 3 => phase"
    - light.turn_on:
        id: screen_backlight
        brightness: 100%
        effect: none
    - lambda: |-
        id(phase) = 3;
    - script.execute: reset_display    

  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda return x;

  on_tts_start:
    - logger.log: "answering  4 => phase"
    - text_sensor.template.publish: 
        id: text_response
        state: !lambda return x;
    - light.turn_on:
        id: screen_backlight
        brightness: 100%
        effect: none                     
    - lambda: |-
        id(phase) = 4;
    - script.execute: reset_display  
    
    
  on_tts_stream_end:
    - logger.log: "TTS playback finished, switching to waiting page"
    - delay: 1sec
    - lambda: id(phase) = 1;
    - script.execute: reset_display             
 

             
  on_error:
    - light.turn_on:
        id: screen_backlight
        brightness: 100%
        effect: none
    - delay: 1s
    - lambda: id(phase) = 1;    
    - script.execute: reset_display

#########
# Scripts

script:
  - id: reset_display
    then:  
       - logger.log: "===> reset display" 
       - lambda: |-
             if(id(phase) == 0)id(logo).execute();
             if(id(phase) == 1)id(waiting).execute();          
             if(id(phase) == 3)id(listening).execute();
             if(id(phase) == 4)id(answering).execute();

  - id: logo
    then:
       - logger.log: "Display ===> logo"
       - lambda: |-
           id(myDisplay).show_page(logoP);
           id(myDisplay).update();         
           id(lightTO) = 0;
       - light.turn_on: screen_backlight   
       - delay: 10sec
       - lambda: id(phase) = 1;        
       - script.execute: reset_display       

  - id: waiting
    then:

               - if:
                   condition:
                         voice_assistant.is_running:
                   then:
                      - delay: 1s  
                      - voice_assistant.stop:                                                               
               - micro_wake_word.start: 
               - logger.log: "Display ===> wakeword"                      
               - lambda: |-
                   id(myDisplay).show_page(waitingP);
                   id(myDisplay).update();
                   id(lightTO) = 0;
               - light.turn_on: screen_backlight
          
                                                        
  - id: listening
    then:
       - logger.log: "Display ===> listening"       
       - lambda: |-
            id(myDisplay).show_page(listeningP);  
            id(myDisplay).update();     
            id(lightTO) = 0;
       - light.turn_on: screen_backlight   
                                                                                        
  - id: answering
    then:
       - logger.log: "Display ===> answering"   
       - lambda: |-
            id(myDisplay).show_page(answeringP);          
            id(myDisplay).update();          
            id(lightTO) = 0;
       - light.turn_on: screen_backlight       
       
   
      
      
                    
